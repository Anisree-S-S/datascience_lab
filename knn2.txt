from sklearn import datasets,preprocessing,neighbors
from sklearn.datasets import load_iris
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix
%matplotlib inline
iris=datasets.load_iris()
X, y = iris.data[:, :], iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, random_state = 0, train_size = 0.7)
print("training data before preprocessing")
print(X_train)
print("\n")
scaler = preprocessing.StandardScaler().fit(X_train)
X_train = scaler.transform(X_train)
print("display scaled data")
print("\n")
print(X_train)
print("\n")
X_test = scaler.transform(X_test)
scores = []
k_range = range(1,15)
for k in k_range:
  knn = neighbors.KNeighborsClassifier(n_neighbors=k)
  knn.fit(X_train, y_train)
  y_pred = knn.predict(X_test)
  
print("Prediction of Species: {}".format(y_pred))  
print("Accuracy score")
print(accuracy_score(y_test, y_pred))
print("Confusion matrix")
print(confusion_matrix(y_test, y_pred))
print("Classification Report")
print(classification_report(y_test, y_pred))


#for error rate

from sklearn.neighbors import KNeighborsClassifier
error_rate=[]
for i in range(1,40):
    knn=KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train,y_train)
    pred_i=knn.predict(X_test)
    error_rate.append(np.mean(pred_i != y_test))

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue',linestyle='dashed',marker='s',markerfacecolor='orange',markersize=10)
plt.title('error rate vs k vales')
plt.xlabel('k')
plt.ylabel('error rate')
knn.fit(X_train,y_train)
